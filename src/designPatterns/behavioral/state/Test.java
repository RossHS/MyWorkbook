package designPatterns.behavioral.state;

/**
 * Состояние — это поведенческий паттерн проектирования, который позволяет объектам менять поведение в
 * зависимости от своего состояния. Извне создаётся впечатление, что изменился класс объекта.
 * <p>
 * Когда у вас есть объект, поведение которого кардинально меняется в зависимости от внутреннего состояния,
 * причём типов состояний много, и их код часто меняется.
 * <p>
 * Паттерн предлагает выделить в собственные классы все поля и методы, связанные с определёнными состояниями.
 * Первоначальный объект будет постоянно ссылаться на один из объектов-состояний,
 * делегируя ему часть своей работы. Для изменения состояния в контекст достаточно будет подставить другой объект-состояние.
 * <p>
 * Когда код класса содержит множество больших, похожих друг на друга, условных операторов,
 * которые выбирают поведения в зависимости от текущих значений полей класса.
 * <p>
 * Паттерн предлагает переместить каждую ветку такого условного оператора в собственный класс.
 * Тут же можно поселить и все поля, связанные с данным состоянием.
 * <p>
 * Когда вы сознательно используете табличную машину состояний, построенную на условных операторах,
 * но вынуждены мириться с дублированием кода для похожих состояний и переходов.
 * <p>
 * Паттерн Состояние позволяет реализовать иерархическую машину состояний,
 * базирующуюся на наследовании. Вы можете отнаследовать похожие состояния от
 * одного родительского класса и вынести туда весь дублирующий код.
 *
 * @author Ross Khapilov
 * @version 1.0 06.07.2019
 */
public class Test {
    public static void main(String[] args) {
        Player player = new Player();
        UI ui = new UI(player);
        ui.init();
    }
}
