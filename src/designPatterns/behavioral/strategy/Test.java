package designPatterns.behavioral.strategy;

/**
 * Стратегия — это поведенческий паттерн проектирования,
 * который определяет семейство схожих алгоритмов и помещает
 * каждый из них в собственный класс, после чего алгоритмы
 * можно взаимозаменять прямо во время исполнения программы.
 * <p>
 * Когда вам нужно использовать разные вариации какого-то алгоритма внутри одного объекта.
 * <p>
 * Стратегия позволяет варьировать поведение объекта во время выполнения программы,
 * подставляя в него различные объекты-поведения (например, отличающиеся балансом скорости и потребления ресурсов).
 * <p>
 * Когда у вас есть множество похожих классов, отличающихся только некоторым поведением.
 * <p>
 * Стратегия позволяет вынести отличающееся поведение в отдельную иерархию классов,
 * а затем свести первоначальные классы к одному, сделав поведение этого класса настраиваемым.
 * <p>
 * Когда вы не хотите обнажать детали реализации алгоритмов для других классов.
 * <p>
 * Стратегия позволяет изолировать код, данные и зависимости алгоритмов от других
 * объектов, скрыв эти детали внутри классов-стратегий.
 * <p>
 * Когда различные вариации алгоритмов реализованы в виде развесистого условного
 * оператора. Каждая ветка такого оператора представляет собой вариацию алгоритма.
 * <p>
 * Стратегия помещает каждую лапу такого оператора в отдельный класс-стратегию.
 * Затем контекст получает определённый объект-стратегию от клиента и делегирует
 * ему работу. Если вдруг понадобится сменить алгоритм, в контекст можно подать другую стратегию.
 *
 * @author Ross Khapilov
 * @version 1.0 06.07.2019
 */
public class Test {
}

