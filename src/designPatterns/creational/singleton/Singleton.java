package designPatterns.creational.singleton;

/**
 * Гарантирует, что у класса есть только один экземпляр, и предоставляет к нему
 * глобальную точку доступа.
 * <p>
 * Применимость
 * Используйте паттерн одиночка, когда:
 * ❑ должен быть ровно один экземпляр некоторого класса, легко доступный
 * всем клиентам;
 * ❑ единственный экземпляр должен расширяться путем порождения подклассов,
 * и клиентам нужно иметь возможность работать с расширенным экземпляром без модификации своего кода.
 *
 * @author Ross Khapilov
 * @version 1.0 19.06.2019
 */
public class Singleton {
    private static Singleton single;

    //т.е. имеется только один способ создать данный объект- это его создание внутри самого класса
    private Singleton() {
    }

    //возвращаем ссылку на объект, если ссылка пустая- создаем его, тем самым гарантируем, что у нас все один такой объект
    //lazy initialization - Это прием в программировании, когда ресурсоемкая операция
    // (а создание объекта – это ресурсоемкая операция) выполняется по требованию, а не заблаговременно.
    // Что в общем-то и происходит в нашем коде Singleton’a. Другими словами, наш объект создается в
    // момент обращения к нему, а не заранее.
    public static Singleton getSingle() {
        if (single == null) single = new Singleton();
        return single;
    }
}
