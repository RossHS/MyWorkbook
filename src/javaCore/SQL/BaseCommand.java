package javaCore.SQL;

/**
 * SQL - Structured Query Language (язык структурированных запросов) - язык для работы с базами данных
 * JDBC - основной в java api для работы с БД (имеет возможность подключать различные драйверы)
 * <p>
 * Типы драйверов JDBC
 * 1 - Преобразует интерфейс JDBC в ODBC и для взаимодействия с базой данных использует драйвер ODBC. Один такой драйвер был
 * включен в первые версии Java под названием мост JDBC/ODBC. Но для его применения требуется установить и настроить
 * соответствующим образом драйвер ODBC. В первом выпуске JDBC этот мост предполагалось использовать только для
 * тестирования, а не для применения в рабочих программах. В настоящее время уже имеется достаточное количество более
 * удачных драйверов, поэтому пользоваться мостом JDBC/ODBC не рекомендуется.
 * 2 - Разрабатывается преимущественно на Java и частично на собственном языке программирования, который используется для
 * взаимодействия с клиентским прикладным программным интерфейсом API базы данных. Для применения такого драйвера,
 * помимо библиотеки Java, на стороне клиента необходимо установить код, специфический для конкретной платформы.
 * 3 - Разрабатывается только на основе клиентской библиотеки Java, в которой используется независимый от базы данных
 * протокол передачи запросов базы данных на сервер. Этот протокол приводит запросы базы данных в соответствие
 * с характерным для нее протоколом. Развертывание прикладных программ значительно упрощается благодаря тому,
 * что код, зависящий от конкретной платформы, находится только на сервере.
 * 4 - Представляет собой библиотеку, написанную только на Java, для приведения запросов JDBC в соответствие
 * с протоколом конкретной базы данных.
 * <p>
 * Основные цели прикладного интерфейса JDBC можно сформулировать следующим образом.
 * • Разработчики пишут программы на Java, пользуясь для доступа к базам данных стандартными средствами языка SQL
 * (или его специализированными расширениями), но следуя только соглашениям, принятым в Java.
 * • Поставщики баз данных и инструментальных средств к ним предоставляют драйверы только низкого уровня.
 * Это дает им возможность оптимизировать драйверы под свою конкретную продукцию.
 * <p>
 * Типичные примеры применения JDBC
 * 2 уровня-
 * (клиент+ JDBC) -> Сервер базы данных  - в таком случае JDBC развертывается у клиента
 * 3 уровня-
 * Взаимодействие клиента и промежуточного уровня может быть реализовано по протоколу HTTP. А прикладной интерфейс JDBC
 * служит для управления взаимодействием промежуточного уровня и серверной базы данных.
 * клиент -> промежуточный уровень JDBC -> Сервер базы данных - клиент обращается к промежуточному уровню на сервере, который, выполняет запрос к базе данных.
 * Таким образом, становится возможным доступ к тем же самым данным по таким же бизнес-правилам со стороны разнотипных
 * клиентов, в том числе прикладных программ на Java, веб-браузеров и приложений для мобильных устройств.
 *
 * SQL основные команды
 *
 * SELECT Books.Title, Books.Price -  выбрать столбцы из таблицы, если надо выбрать все то просто надо указать *, только надо указать из какой
 * FROM Books - из какой таблицы выбираем данные
 * WHERE Books.Publisher_Id = Publisher.Publisher_Id - (в java == и !=, в SQL = и <>) дополнительные условия
 * WHERE Title NOT LIKE '%n_x%' - выбор из всех строк, где отсутствуют значения не удовл '%n_x%' к примеру UNIX, LINUX
 *
 * UPDATE Books
 * SET Price = Price - 5.00
 * WHERE Title LIKE '%C++%'
 * обновляет везде цену в столбцах в названии которых имеет С++
 *
 * DELETE FROM Books
 * WHERE Title LIKE '%C++'
 * Удаляет все строки, где в названии книг имеется C++
 *
 * INSERT INTO Books
 * VALUES (’A Guide to the SQL Standard', '0-201-96426-0', '0201', 47.95)
 * Ввод новых данных в таблицу
 *
 * CREATE TABLE Books
 * (
 * Title CHAR(60),  (60) - значит количество символов
 * ISBN CHAR(13) ,
 * Publisher_Id CHAR(6),
 * Price DECIMAL(10,2)   (10,2) 10- количество цифр, 2 - цифр после запятой
 * )
 * Создает таблицу, где указывается имя и тип каждого столбца  + "размер типа"
 *
 *
 * @author Ross Khapilov
 * @version 1.0 27.01.2019
 */
public class BaseCommand {
}
