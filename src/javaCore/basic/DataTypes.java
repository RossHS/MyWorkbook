package javaCore.basic;

import java.math.BigDecimal;

/**
 * Язык Java является строго типизированным. Это означает, что тип каждой переменной
 * должен быть непременно объявлен. В Java имеются восемь простых или примитивных
 * типов данных. Четыре из них представляют целые числа, два — действительные
 * числа с плавающей точкой, один — символы в Юникоде, а последний — логические значения.
 *
 * @author Ross Khapilov
 * @version 1.0 25.09.2018
 */
public class DataTypes {
    /**
     * Целочисленные типы. Обычно используется тип int
     */
    private static void numberTypes() {
        //1 байт От-128 ДО 127
        byte b = 123;
        //2 байта От -32768 до 32767
        short s = 12;
        //4 байта От -2_147_483_648 ДО 2_147_483_647 (т.е. больше 2 млрд.)
        int a = 130;
        //8 байта От -9223372036854775808 ДО -9223372036854775807
        long l = 130L;

        //пример переполнения
        for (int i = 0; i < 10; i++, b++) {
            System.out.println(b + " " +
                    String.format("%8s", Integer.toBinaryString(b & 0xFF)).replace(' ', '0'));
        }
        //С 7 версии можно указывать числа в двоичной форме, так с 7 версии можно указывать в числа знак _ ,
        // который удалится компилятором, но весьма полезен для удобства чтения больший цифр.
        int binary = 0b1001_0101;
        //Восьмеричное число, удобны для разделения двоичных чисел на группы по 3 цифры т.е. число 0117 = 001_001_111,
        // более не используется, т.к. его место заняли 16-ые числа
        int octal = 0117;
        //удобны для разделения двоичных чисел на группы по 4 цифры т.е. число 0x117 = 0001_0001_0111
        int hex = 0x117;
        System.out.println(Integer.toBinaryString(hex));

        System.out.println("двоичная форма= " + binary + ". восьмеричная = " + octal);
    }

    /**
     * Название double означает, что точность таких чисел вдвое превышает точность
     * чисел типа float. (Некоторые называют их числами с двойной точностью.) Для большинства
     * приложений тип double считается более удобным, а ограниченной точности
     * чисел типа float во многих случаях оказывается совершенно недостаточно. Числовыми
     * значениями типа float следует пользоваться лишь в работе с библиотекой,
     * где они непременно требуются, или же в том случае, если такие значения приходится
     * хранить в большом количестве.
     * <p>
     * Числа с плавающей точкой нельзя использовать в финансовых расчетах, где ошибки
     * округления недопустимы. Например, в результате выполнения оператора System.out.
     * p r in tin ( 2 .0 - 1 .1 ) будет выведено значение 0 .899999999999999 , а не 0.9 , как было бы
     * логично предположить. Подобные ошибки связаны с внутренним двоичным представлением чисел.
     * Как в десятичной системе счисления нельзя точно представить результат деления 1 /3 , так и в
     * двоичной системе невозможно точно представить результат деления 1 /1 0 . Если же требуется исключить
     * ошибки округления, то следует воспользоваться классом BigDecimal.
     */
    private static void floatPointNumber() {
        //4 байта - Приблизительно ±3,40282347E+38F (6-7 значащих десятичных цифр)
        float f = 1.9F;
        //8 байт - Приблизительно ±1,7976931348623157E+308F (15 значащих десятичных цифр)
        double d = 0.12;
        System.out.println(2.0 - 1.1);
        BigDecimal bigDecimal = new BigDecimal(2.0);
    }

    /**
     * \b Возврат на одну позицию \u0008
     * \t Табуляция \u0009
     * \n Переход на новую строку \u000a
     * \r Возврат каретки \u000d
     * \" Двойная кавычка \u0022
     * \' Одинарная кавычка \u0027
     * \\ Обратная косая черта \u005c
     *
     * Первоначально тип char предназначался для описания отдельных символов, но
     * теперь это уже не так. Ныне одни символы в Юникоде (Unicode) могут быть описаны
     * единственным значением типа char, а для описания других требуются два значения
     * типа char. Подробнее об этом речь пойдет в следующем разделе.
     * Литеральные значения типа char должны быть заключены в одиночные кавычки.
     * Например, литеральное значение ’А’ является символьной константой, которой соответствует
     * числовое значение 65. Не следует путать символ ’А’ со строкой "А", состоящей
     * из одного символа. Кодовые единицы Юникода могут быть представлены шестнадцатеричными
     * числами в пределах от \u0000 до \uFFFF. Например, значение \u2122 соответствует
     * знаку торговой марки (™), а значение \u03C0 — греческой букве п.
     */
    private static void charType() {
        //char 16-разрядный символ
        char c1 = 'a';
        char c2 = '\u03C0';
        System.out.println(c2);
    }

    /**
     * Тип данных boolean имеет два логических значения: f a ls e и true, которые служат
     * для вычисления логических выражений. Преобразование значений типа boolean
     * в целочисленные и наоборот невозможно.
     */
    private static void booleanType(){
        boolean b = true;
    }

    public static void main(String[] args) {
        numberTypes();
        floatPointNumber();
        charType();
    }
}
