package javaCore.concurrency;

/**
 * Демон — это лишь поток, у которого нет других целей, кроме служения другим. В качестве примера можно привести потоки
 * исполнения таймера, посылающие регулярные "такты" другим потокам, или же потоки исполнения, очищающие устаревшие
 * записи в кеше. Когда остаются только потоковые демоны, виртуальная машина завершает работу. Нет смысла продолжать
 * выполнение программы, когда все оставшиеся потоки исполнения являются демонами. Начинающие программисты, которые не
 * хотят думать о действиях, завершающих программу, иногда ошибочно используют потоковые демоны. Но такой подход не
 * безопасен. Потоковый демон вообще не должен обращаться к такому постоянному ресурсу, как файл или база данных,
 * поскольку он может быть прерван в любой момент, даже посередине операции.
 *
 * @author Ross Khapilov
 * @version 1.0 04.09.2018
 */
public class Daemon implements Runnable {
    private int sec = 0;

    public static void main(String[] args) throws InterruptedException {
        Daemon d = new Daemon();
        Thread thread = new Thread(d);
        //таким образом по окончанию основного потока прекратит свою работу и поток-демон.
        thread.setDaemon(true);
        thread.start();
        Thread.sleep(10_000);
        System.out.println(Thread.currentThread().getName()+" завершил работу спустя " + d.sec +" секунд");
    }

    @Override
    public void run() {
        while(true){
            try {
                Thread.sleep(1000);
                sec++;
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
